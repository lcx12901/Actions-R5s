name: Coolsnowwolf/Lede Pre Packages
on:
  repository_dispatch:
    types: ['compile Packages']
#  schedule:
#    - cron: 0 18 * * *
#  watch:
#    types: started

env:
  SOURCE_URL: https://github.com/coolsnowwolf/lede
  SOURCE_BRANCH: master
  FEEDS_CONF: feeds_config/custom.feeds.conf.default
  CONFIG_FILE: config/R5S.config
  DIY_P2_SH: diy-part2.sh
  RELEASE_BRANCH: main
  RELEASE_TAG: toolchain
  TZ: Asia/Shanghai

jobs:
  Build_Packages:
    name: Compile Packages ${{ matrix.PLATFORM }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        PLATFORM: [rockchip/armv8] #x86/64,
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android /opt/ghc
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          export SOURCE_USER=$(echo $SOURCE_URL | awk -F '/' '{print $(NF-1)}')
          echo "SOURCE_USER=$SOURCE_USER" >> $GITHUB_ENV
          export SOURCE_NAME=$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')
          echo "SOURCE_NAME=$SOURCE_NAME" >> $GITHUB_ENV
          export TARGET_INFO="$SOURCE_USER-$SOURCE_NAME-$SOURCE_BRANCH"
          echo "TARGET_INFO=$TARGET_INFO" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
          df -hT $PWD

      - name: Clone Source Code
        if: steps.init.conclusion == 'success' && !cancelled()
        id: clone
        run: |
          git clone $SOURCE_URL -b $SOURCE_BRANCH openwrt --single-branch
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Install Feeds
        id: feeds
        run: |
          cd $OPENWRTROOT
          ./scripts/feeds update -a 
          ./scripts/feeds install -a

      - name: Build Package
        id: BuildPackage
        run: |
          cd openwrt
          echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config #Cache.Speedup
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Fetch Cached Tools
        id: fetchTool
        run: |
          cd $OPENWRTROOT
          rm -rf build_dir staging_dir
          wget -c -t=3 https://github.com/lcx12901/Actions-R5s/releases/download/$RELEASE_TAG/$TARGET_INFO-prebuild-tools.tar.xz
          ./scripts/ext-tools.sh --tools *-prebuild-tools.tar.xz
          rm *.tar.xz

      - name: Prepare config file
        env:
          PLATFORM: ${{ matrix.PLATFORM }}
        id: config
        if: steps.fetchTool.conclusion == 'success' && !cancelled()
        run: |
          cp config/$PLATFORM.config $OPENWRTROOT/.config
          cat config/extra.config >> $OPENWRTROOT/.config
          cd $OPENWRTROOT
          export DEVICE_TARGET="$(grep -v ^\# .config | grep _DEVICE_ | cut -d_ -f3)"
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          export DEVICE_SUBTARGET="$(grep -v ^\# .config | grep _DEVICE_ | cut -d_ -f4)"
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          make defconfig
          export DEVICE_ARCH="$(grep -v ^\# .config | grep CONFIG_ARCH= | cut -d\" -f2)"
          echo "DEVICE_ARCH=$DEVICE_ARCH" >> $GITHUB_ENV
          DEVICE_ARCH_PACKAGES="$(grep -v ^\# .config | grep CONFIG_TARGET_ARCH_PACKAGES= | cut -d\" -f2)"
          echo "DEVICE_ARCH_PACKAGES=$DEVICE_ARCH_PACKAGES" >> $GITHUB_ENV

      - name: Fetch Cached ToolChain
        id: fetchToolChain
        if: steps.config.conclusion == 'success' && !cancelled()
        run: |
          cd $OPENWRTROOT
          rm -rf bin/target/$DEVICE_TARGET/$DEVICE_SUBTARGET/* || true
          mkdir bin/target/$DEVICE_TARGET/$DEVICE_SUBTARGET || true
          DEVICESUBTARGET=$DEVICE_SUBTARGET
          wget -c -t=3 https://github.com/lcx12901/Actions-R5s/releases/download/$RELEASE_TAG/$TARGET_INFO-$DEVICE_TARGET-$DEVICE_SUBTARGET-toolchain.tar.xz
          mkdir -p bin/target/$DEVICE_TARGET/$DEVICE_SUBTARGET
          mv $TARGET_INFO-$DEVICE_TARGET-$DEVICE_SUBTARGET-toolchain.tar.xz bin/target/$DEVICE_TARGET/$DEVICE_SUBTARGET/openwrt-toolchain-$DEVICE_TARGET-$DEVICESUBTARGET_gcc-11.3.0_musl.Linux-x86_64.tar.xz
          ls bin/target/*/*

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
